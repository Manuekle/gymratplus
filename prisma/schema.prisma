// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String?              @unique
  experienceLevel      String?
  emailVerified        DateTime?
  image                String?
  password             String?
  isInstructor         Boolean              @default(false)
  interests            String[]             @default([])
  instructorProfile    InstructorProfile?
  accounts             Account[]
  sessions             Session[]
  profile              Profile?
  // Rutinas creadas por este usuario (alumno o instructor)
  createdWorkouts      Workout[]            @relation("WorkoutCreator")
  // Rutinas creadas como instructor
  instructorWorkouts   Workout[]            @relation("WorkoutInstructor")
  // Rutinas asignadas a este usuario (como alumno)
  assignedWorkouts     Workout[]            @relation("AssignedWorkouts")
  workoutSessions      WorkoutSession[]
  notifications        Notification[]
  customFoods          Food[]
  customRecipes        Recipe[]
  mealLogs             MealLog[]
  weights              Weight[]
  workoutStreak        WorkoutStreak?
  // Subscription fields
  subscriptionStatus   String?              @default("inactive") // 'inactive', 'trialing', 'active', 'past_due', 'canceled', or 'unpaid'
  planType             String?              @default("free")     // 'free', 'monthly', 'annual'
  trialEndsAt          DateTime?                                  // Fecha de finalización del período de prueba
  currentPeriodEnd     DateTime?                                  // Fecha de finalización del período de pago actual
  cancelAtPeriodEnd    Boolean              @default(false)       // Si es true, la suscripción se cancelará al final del período actual
  
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  Goal                 Goal[]
  foodRecommendations  FoodRecommendation[]
  foodPlans            FoodPlan[]
  studentRelationships StudentInstructor[]  @relation("StudentToInstructor")
}

model Profile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  gender               String?
  phone                String?
  birthdate            DateTime?
  height               String? // en cm
  currentWeight        String? // en kg
  targetWeight         String? // en kg
  activityLevel        String? // sedentario, ligero, moderado, activo, muy activo
  goal                 String? // perder peso, mantener peso, ganar músculo
  bodyFatPercentage    String? // % grasa corporal
  muscleMass           String? // % masa muscular
  metabolicRate        Int? // tasa metabólica basal en kcal
  dailyActivity        String? // actividad diaria (Ej: trabajo de oficina, trabajo físico)
  trainingFrequency    Int? // cantidad de entrenamientos por semana
  monthsTraining       Int? // Nuevo campo: meses entrenando
  preferredWorkoutTime String? // hora preferida para entrenar (Ej: mañana, tarde, noche)
  dietaryPreference    String? // preferencias dietéticas (Ej: vegetariano, keto, etc.)
  dailyCalorieTarget   Int? // calorías objetivo diarias (se calcula automáticamente)
  dailyProteinTarget   Int? // proteína diaria en gramos (se calcula automáticamente)
  dailyCarbTarget      Int? // carbohidratos diarios en gramos (se calcula automáticamente)
  dailyFatTarget       Int? // grasas diarias en gramos (se calcula automáticamente)
  waterIntake          Float? // consumo de agua en litros por día (se calcula automáticamente)
  notificationsActive  Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Exercise {
  id               String            @id @default(cuid())
  name             String
  description      String?           @db.Text
  muscleGroup      String // pecho, espalda, piernas, etc.
  equipment        String? // mancuernas, máquinas, peso corporal, etc.
  videoUrl         String?
  imageUrl         String?
  sets             WorkoutExercise[]
  exerciseSessions ExerciseSession[] // Relación inversa con ExerciseSession
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Workout {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text

  // CREADOR de la rutina (puede ser alumno o instructor)
  createdById String
  createdBy   User   @relation("WorkoutCreator", fields: [createdById], references: [id], onDelete: Cascade)

  // INSTRUCTOR que creó/supervisó la rutina (solo si fue creada por instructor)
  instructorId String?
  instructor   User?   @relation("WorkoutInstructor", fields: [instructorId], references: [id])

  // ALUMNO al que se asigna la rutina
  assignedToId String?
  assignedTo   User?   @relation("AssignedWorkouts", fields: [assignedToId], references: [id])

  // Campos de asignación
  assignedDate DateTime?
  dueDate      DateTime?
  status       String?   @default("draft") // "draft", "assigned", "in_progress", "completed", "skipped"
  notes        String?

  // Tipo de rutina para mayor claridad
  type String @default("personal") // "personal", "assigned"

  exercises       WorkoutExercise[]
  workoutSessions WorkoutSession[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([createdById])
  @@index([instructorId])
  @@index([assignedToId])
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workoutId  String
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  sets       Int
  reps       Int
  weight     Float? // en kg
  restTime   Int? // en segundos
  order      Int
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Modificaciones al modelo Food existente
model Food {
  id               String             @id @default(cuid())
  name             String
  calories         Int
  protein          Float // en gramos
  carbs            Float // en gramos
  fat              Float // en gramos
  fiber            Float? // en gramos
  sugar            Float? // en gramos
  serving          Float // en gramos
  category         String // proteína, carbohidrato, grasa, etc.
  mealType         String[] // ["desayuno", "almuerzo", "cena", "snack"]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  User             User?              @relation(fields: [userId], references: [id])
  userId           String?
  RecipeIngredient RecipeIngredient[]
  MealLog          MealLog[]
}

// Nuevo modelo Recipe
model Recipe {
  id              String             @id @default(cuid())
  name            String
  description     String?            @db.Text
  instructions    String?            @db.Text
  preparationTime Int? // en minutos
  servings        Int                @default(1)
  imageUrl        String?
  mealType        String[] // ["desayuno", "almuerzo", "cena", "snack"]
  calories        Int // calculado en base a ingredientes
  protein         Float // calculado en base a ingredientes
  carbs           Float // calculado en base a ingredientes
  fat             Float // calculado en base a ingredientes
  fiber           Float? // calculado en base a ingredientes
  sugar           Float? // calculado en base a ingredientes
  userId          String? // Para recetas personalizadas
  user            User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  ingredients     RecipeIngredient[]
  mealLogs        MealLog[]
  mealEntries     MealEntryRecipe[]  @relation("RecipeMealEntries")
  isFavorite      Boolean            @default(false)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

// Nuevo modelo para relacionar recetas e ingredientes
model RecipeIngredient {
  id        String   @id @default(cuid())
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  foodId    String
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  quantity  Float // cantidad del ingrediente
  unit      String? // unidad de medida (g, ml, cucharada, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MealLog {
  id              String            @id @default(cuid())
  userId          String
  mealType        String
  consumedAt      DateTime
  foodId          String?
  recipeId        String?
  quantity        Float
  calories        Int
  protein         Float
  carbs           Float
  fat             Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  // Relaciones
  food            Food?             @relation(fields: [foodId], references: [id])
  recipe          Recipe?           @relation(fields: [recipeId], references: [id])
  User            User              @relation(fields: [userId], references: [id])
  MealEntryRecipe MealEntryRecipe[]

  @@index([userId])
  @@index([foodId])
  @@index([recipeId])
  @@index([consumedAt])
}

model DailyWaterIntake {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now()) @db.Date // Usar solo la fecha sin hora
  intake    Float    @default(0) // En litros
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
}

model MealEntryRecipe {
  id        String   @id @default(cuid())
  recipeId  String
  recipe    Recipe   @relation("RecipeMealEntries", fields: [recipeId], references: [id], onDelete: Cascade)
  mealLogId String
  mealLog   MealLog  @relation(fields: [mealLogId], references: [id], onDelete: Cascade)
  quantity  Float    @default(1.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([recipeId, mealLogId])
}

model Weight {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weight               Float // en kg
  bodyFatPercentage    Float? // nuevo campo para % de grasa corporal
  muscleMassPercentage Float? // nuevo campo para % de masa muscular
  date                 DateTime
  notes                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
  @@index([date])
}

model Goal {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Tipo de objetivo
  type String // "weight", "strength", "measurement", "activity"

  // Detalles del objetivo
  title        String
  description  String?
  targetValue  Float? // Valor objetivo (ej: 70kg para peso, 100kg para press banca)
  currentValue Float? // Valor actual
  initialValue Float? // Valor inicial cuando se creó el objetivo
  unit         String? // "kg", "cm", "veces/semana", etc.

  // Para objetivos de fuerza
  exerciseType String? // "benchPress", "squat", "deadlift", etc.

  // Para objetivos de medidas
  measurementType String? // "waist", "chest", "arms", etc.

  // Fechas
  startDate     DateTime
  targetDate    DateTime?
  completedDate DateTime?

  // Estado
  status   String @default("active") // "active", "completed", "abandoned"
  progress Float? // Porcentaje de progreso (0-100)

  // Historial de progreso
  progressUpdates GoalProgress[]

  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([status])
}

model GoalProgress {
  id     String @id @default(cuid())
  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)

  value Float
  date  DateTime
  notes String?

  createdAt DateTime @default(now())

  @@index([goalId])
  @@index([date])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  type      String // "workout", "streak", "rest_day", "achievement", etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model WorkoutSession {
  id        String            @id @default(cuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutId String
  workout   Workout           @relation(fields: [workoutId], references: [id])
  date      DateTime          @default(now())
  completed Boolean           @default(false)
  duration  Int? // duración en minutos
  exercises ExerciseSession[]
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model ExerciseSession {
  id               String         @id @default(cuid())
  workoutSessionId String
  workoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  exerciseId       String
  exercise         Exercise       @relation(fields: [exerciseId], references: [id])
  completed        Boolean        @default(false)
  sets             SetSession[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model SetSession {
  id                String          @id @default(cuid())
  exerciseSessionId String
  exerciseSession   ExerciseSession @relation(fields: [exerciseSessionId], references: [id], onDelete: Cascade)
  setNumber         Int // número de serie (1, 2, 3...)
  weight            Float? // peso utilizado
  reps              Int? // repeticiones realizadas
  isDropSet         Boolean         @default(false)
  completed         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model FoodRecommendation {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date          DateTime @default(now())
  macros        Json // Stores protein, carbs, fat, description
  meals         Json // Stores breakfast, lunch, dinner, snacks with their entries
  calorieTarget Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model FoodPlan {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  goal          String // e.g., "bulking", "cutting", "maintenance"
  calorieTarget Int
  protein       Int // in grams
  carbs         Int // in grams
  fat           Int // in grams
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model WorkoutStreak {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentStreak Int       @default(0)
  longestStreak Int       @default(0)
  lastWorkoutAt DateTime?
  lastRestDayAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model InstructorProfile {
  id            String              @id @default(cuid())
  userId        String              @unique
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String?             @db.Text
  curriculum    String?             @db.Text
  pricePerMonth Float?
  contactEmail  String?
  contactPhone  String?
  country       String?
  city          String?
  isRemote      Boolean             @default(false)
  isVerified    Boolean             @default(false)
  isPaid        Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  students      StudentInstructor[] @relation("InstructorProfileToStudentInstructor")
}

model StudentInstructor {
  id                  String            @id @default(cuid())
  studentId           String
  student             User              @relation("StudentToInstructor", fields: [studentId], references: [id], onDelete: Cascade)
  instructorProfileId String
  instructor          InstructorProfile @relation("InstructorProfileToStudentInstructor", fields: [instructorProfileId], references: [id], onDelete: Cascade)
  status              String            @default("pending")
  agreedPrice         Float?
  startDate           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([studentId, instructorProfileId])
  @@index([studentId])
  @@index([instructorProfileId])
}
